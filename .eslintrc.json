{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 12,
    "sourceType": "module",
    "project": "tsconfig.json"
  },
  "ignorePatterns": [
    "dist/",
    "node_modules/",
    "migrations/"
  ],
  "plugins": [
    "@typescript-eslint"
  ],
  "rules": {
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/explicit-module-boundary-types": [
      "error",
      {
        "allowArgumentsExplicitlyTypedAsAny": true
      }
    ],
    "comma-spacing": "error",
    "no-trailing-spaces": "error",
    "@typescript-eslint/space-infix-ops": "error",
    "space-in-parens": "error",
    "comma-dangle": "error",
    "key-spacing": "error",
    "keyword-spacing": "error",
    "space-before-blocks": "error",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Object": {
            "message": "Avoid using the `Object` type. Did you mean `object`?"
          },
          "Function": {
            "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
          },
          "Boolean": {
            "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
          },
          "Number": {
            "message": "Avoid using the `Number` type. Did you mean `number`?"
          },
          "String": {
            "message": "Avoid using the `String` type. Did you mean `string`?"
          },
          "Symbol": {
            "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
          }
        }
      }
    ],
    "@typescript-eslint/adjacent-overload-signatures": [
      "error"
    ],
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        }
      }
    ],
    "@typescript-eslint/type-annotation-spacing": [
      "error"
    ],
    "eqeqeq": [
      "error",
      "smart"
    ],
    "no-cond-assign": "error",
    "object-shorthand": "error",
    "prefer-const": [
      "error"
    ],
    "quote-props": [
      "error",
      "as-needed"
    ],
    "space-infix-ops": "off",
    "indent": [
      "error",
      4,
      {
        "SwitchCase": 1
      }
    ],
    "arrow-spacing": 2,
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "never",
        "asyncArrow": "always",
        "named": "never"
      }
    ],
    "no-else-return": "error",
    "camelcase": "error",
    "max-depth": [
      "error",
      {
        "max": 4
      }
    ],
    "max-lines": [
      "error",
      {
        "max": 250
      }
    ],
    "max-lines-per-function": [
      "error",
      {
        "max": 25
      }
    ],
    "complexity": [
      "error",
      {
        "max": 10
      }
    ],
    "object-curly-spacing": [
      "error",
      "always"
    ],
    "@typescript-eslint/explicit-function-return-type": [
      "error"
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "classMethod",
        "format": [
          "camelCase"
        ]
      },
      {
        "selector": "classMethod",
        "format": [
          "camelCase"
        ],
        "modifiers": [
          "private"
        ],
        "leadingUnderscore": "require"
      },
      {
        "selector": "classProperty",
        "format": [
          "camelCase"
        ],
        "modifiers": [
          "private"
        ],
        "leadingUnderscore": "require"
      },
      {
        "selector": "function",
        "format": [
          "PascalCase"
        ]
      },
      {
        "selector": [
          "variable",
          "classProperty"
        ],
        "types": [
          "boolean"
        ],
        "format": [
          "PascalCase"
        ],
        "prefix": [
          "is",
          "should",
          "has",
          "can",
          "did",
          "will",
          "est"
        ]
      }
    ],
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/explicit-member-accessibility": "error",
    "quotes": [
      "error",
      "single"
    ],
    "sort-imports": "off",
    "max-len": [
      "error",
      {
        "code": 150
      }
    ],
    "sort-keys": "off",
    "arrow-parens": "off",
    "no-unused-expressions": "error",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "error"
  },
  "overrides": [
    {
      "files": "*.spec.ts",
      "env": { "node": true },
      "rules": {
        "max-lines-per-function": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "max-lines": "off",
        "@typescript-eslint/no-explicit-any": "off"
      }
    },
    {
        "files": "*.controller.ts",
        "env": { "node": true },
        "rules": {
          "max-lines-per-function": [
            "error",
            {
              "max": 45
            }
          ]
        }
      },
      {
          "files": "**/external/**/*.interface*.ts",
          "env": { "node": true },
          "rules": {
              "max-lines": "off",
              "camelcase": "off",
              "@typescript-eslint/no-namespace": "off",
              "@typescript-eslint/no-explicit-any": "off"
          }
      }
  ]
}
